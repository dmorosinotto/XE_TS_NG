//Mostro Union type con passaggio callback string (=nome campo) oppure funzione che torna valore (x:T => any)
//Per funzionare bisogna compilare TS 1.4 e sostituire i file nei percorsi di VS: http://github.com/Microsoft/TypeScript/issues/1110

interface Entity {
    name: string;
}

function sortBy<T>(a: T[], key: string | ((item:T) => any) ) {
    var result = a.slice(0); //mostrare Goto Definition della slice per mostrare dichiarazione lib.d.ts
    var callback = typeof key === "string" ? x => x[key] : key; //type guard per tipizzare vari rami del union type
    result.sort(function (x, y) {
        var kx = callback(x);
        var ky = callback(y);
        return kx > ky ? 1 : kx < ky ? -1 : 0;
    });
    return result;
}

var products = [
    { name: "Surface3", price: 919, id: 300223100 },
    { name: "iPhone 6", price: 729, id: 50042416967 },
    { name: "Mac Pro", price: 3053.03, id: 151442705310 },
    { name: "MS Band", price: 199.9, id: 748406274423 }
];

var test = sortBy(products, i => i.name.toLowerCase()); //passaggio di lambda con type inference su i
alert(test[0].id); //type flow con generics

test = sortBy(products, "price"); //passaggio di string come nome campo union typeguard genera callback internamente
alert(test[0].price);
